import asyncio
from typing import List
from aiogram import Bot
from app.database.request import get_products_for_price_check, update_product_price, get_user
from app.service.price_parser import check_wildberries_price


class PriceTracker:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.is_running = False

    async def start_tracking(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω"""
        self.is_running = True
        while self.is_running:
            try:
                await self.check_all_prices()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ —Ü–µ–Ω: {e}")
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def stop_tracking(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω"""
        self.is_running = False

    async def check_all_prices(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—ã –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        products = await get_products_for_price_check()
        
        for product in products:
            try:
                await self.check_single_product(product)
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(2)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–≤–∞—Ä–∞ {product.id}: {e}")

    async def check_single_product(self, product):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—É –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Wildberries URL
            if 'wildberries.ru' not in product.url and 'wb.ru' not in product.url:
                return

            new_price = await check_wildberries_price(product.url)
            
            if new_price is None:
                return

            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            if abs(new_price - product.current_price) > 0.01:  # –£—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ —Ä–∞–∑–ª–∏—á–∏—è
                old_price = product.current_price
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –±–∞–∑–µ
                updated_product = await update_product_price(product.id, new_price)
                
                if updated_product:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    price_difference = abs(new_price - old_price)
                    
                    if price_difference >= product.price_threshold:
                        await self.send_price_notification(updated_product, old_price, new_price)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–≤–∞—Ä–∞ {product.id}: {e}")

    async def send_price_notification(self, product, old_price, new_price):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã"""
        try:
            user = await get_user(product.user_id)
            if not user:
                return

            price_difference = new_price - old_price
            change_type = "–≤—ã—Ä–æ—Å–ª–∞" if price_difference > 0 else "—É–ø–∞–ª–∞"
            
            message = f"üîî –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã!\n\n"
            message += f"üì¶ –¢–æ–≤–∞—Ä: {product.name}\n"
            message += f"üí∞ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {old_price:.2f} ‚ÇΩ\n"
            message += f"üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price:.2f} ‚ÇΩ\n"
            message += f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {price_difference:+.2f} ‚ÇΩ ({change_type})\n\n"
            message += f"üîó –°—Å—ã–ª–∫–∞: {product.url}"

            await self.bot.send_message(user.tg_id, message)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def check_price_now(self, product_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"""
        try:
            product = await get_products_for_price_check()
            product = next((p for p in product if p.id == product_id), None)
            
            if not product:
                return False
                
            await self.check_single_product(product)
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω—ã: {e}")
            return False
