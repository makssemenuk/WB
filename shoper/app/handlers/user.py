import os
import re
from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from app.handlers import keyb as kb
import app.database.request as rq
from app.service.price_parser import get_wildberries_price
from app.service.price_tracker import PriceTracker


router = Router()


class Form1(StatesGroup):
    name = State()
    phone = State()


class ProductForm(StatesGroup):
    waiting_for_url = State()
    waiting_for_threshold = State()


@router.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext, bot: Bot):
    await state.clear()

    tg_id = message.from_user.id

    is_user = await rq.set_user(tg_id)
    if not is_user:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await state.set_state(Form1.name)
    else:
        await message.answer("/help - –¥–ª—è –ø–æ–º–æ—â–∏ –∏–ª–∏ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=kb.order_bot)


@router.message(Form1.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Form1.phone)


PHONE_PATTERN = re.compile(r"^\+?\d{10,15}$")  # –ù–∞–ø—Ä–∏–º–µ—Ä: +380XXXXXXXXX –∏–ª–∏ 380XXXXXXXXX

@router.message(Form1.phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    
    if not PHONE_PATTERN.match(phone):
        await message.answer("‚ùó –ù–æ–º–µ—Ä –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +380XXXXXXXX.")
        return
    
    await state.update_data(phone=phone)
    tg_id = message.from_user.id
    user_data = await state.get_data()
    name = user_data['name']
    phone_number = user_data['phone']
    
    await rq.update_user(tg_id, name, phone_number)
    await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=kb.order_bot)
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@router.message(F.text == "üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_product_button(message: types.Message, state: FSMContext):
    await add_product_start(message, state)


@router.message(F.text == "üìã –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã")
async def list_products_button(message: types.Message):
    await list_products(message)


@router.message(F.text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã")
async def check_prices_button(message: types.Message):
    await message.answer(
        "üîç –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "/check <–Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞>\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /list"
    )


@router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def delete_product_button(message: types.Message):
    await message.answer(
        "‚ùå –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "/delete <–Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞>\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /list"
    )


@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_button(message: types.Message):
    await help_command(message)


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
@router.message(Command("add"))
async def add_product_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    await state.clear()
    await message.answer(
        "üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Wildberries:"
    )
    await state.set_state(ProductForm.waiting_for_url)


@router.message(ProductForm.waiting_for_url)
async def process_product_url(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç URL —Ç–æ–≤–∞—Ä–∞"""
    url = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Wildberries URL
    if 'wildberries.ru' not in url and 'wb.ru' not in url:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Wildberries (wildberries.ru –∏–ª–∏ wb.ru)")
        return
    
    await message.answer("üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        product_info = await get_wildberries_price(url)
        
        if not product_info:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")
            await state.clear()
            return
        
        name, price = product_info
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(url=url, name=name, price=price)
        
        await message.answer(
            f"üì¶ –¢–æ–≤–∞—Ä: {name}\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price:.2f} ‚ÇΩ\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ —Ä—É–±–ª—è—Ö):\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: 50 (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –Ω–∞ 50+ —Ä—É–±–ª–µ–π)"
        )
        await state.set_state(ProductForm.waiting_for_threshold)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ: {e}")
        await state.clear()


@router.message(ProductForm.waiting_for_threshold)
async def process_threshold(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Ä–æ–≥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        threshold = float(message.text.strip())
        if threshold <= 0:
            await message.answer("‚ùå –ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    user_data = await state.get_data()
    url = user_data['url']
    name = user_data['name']
    price = user_data['price']
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await rq.get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É
        product = await rq.add_product(user.id, name, url, price, threshold)
        
        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üì¶ {name}\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price:.2f} ‚ÇΩ\n"
            f"üîî –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {threshold} ‚ÇΩ\n\n"
            f"–ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∏ —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞ {threshold}+ —Ä—É–±–ª–µ–π."
        )
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
    
    await state.clear()


@router.message(Command("list"))
async def list_products(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    user = await rq.get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.")
        return
    
    products = await rq.get_user_products(user.id)
    
    if not products:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.")
        return
    
    message_text = "üì¶ –í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã:\n\n"
    
    for i, product in enumerate(products, 1):
        message_text += f"{i}. {product.name}\n"
        message_text += f"   üí∞ –¶–µ–Ω–∞: {product.current_price:.2f} ‚ÇΩ\n"
        message_text += f"   üîî –ü–æ—Ä–æ–≥: {product.price_threshold} ‚ÇΩ\n"
        message_text += f"   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {product.created_at.strftime('%d.%m.%Y')}\n\n"
    
    message_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check <–Ω–æ–º–µ—Ä> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã –∏–ª–∏ /delete <–Ω–æ–º–µ—Ä> –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
    
    await message.answer(message_text)


@router.message(Command("check"))
async def check_price_command(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()
        if len(args) != 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /check <–Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞>")
            return
        
        product_num = int(args[1])
        if product_num <= 0:
            await message.answer("‚ùå –ù–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        
        user = await rq.get_user(message.from_user.id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        products = await rq.get_user_products(user.id)
        
        if product_num > len(products):
            await message.answer(f"‚ùå –¢–æ–≤–∞—Ä —Å –Ω–æ–º–µ—Ä–æ–º {product_num} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        product = products[product_num - 1]
        
        await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ü–µ–Ω—É...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É
        new_price = await get_wildberries_price(product.url)
        
        if new_price is None:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞.")
            return
        
        name, current_price = new_price
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –±–∞–∑–µ
        await rq.update_product_price(product.id, current_price)
        
        price_change = current_price - product.current_price
        
        if abs(price_change) > 0.01:
            change_text = f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {price_change:+.2f} ‚ÇΩ"
            if price_change > 0:
                change_text += " (—Ü–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞)"
            else:
                change_text += " (—Ü–µ–Ω–∞ —É–ø–∞–ª–∞)"
        else:
            change_text = "üìä –¶–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å"
        
        await message.answer(
            f"üì¶ {name}\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f} ‚ÇΩ\n"
            f"üí∞ –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ü–µ–Ω–∞: {product.current_price:.2f} ‚ÇΩ\n"
            f"{change_text}"
        )
        
    except ValueError:
        await message.answer("‚ùå –ù–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω—ã: {e}")


@router.message(Command("delete"))
async def delete_product_command(message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete <–Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞>")
            return
        
        product_num = int(args[1])
        if product_num <= 0:
            await message.answer("‚ùå –ù–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        
        user = await rq.get_user(message.from_user.id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        products = await rq.get_user_products(user.id)
        
        if product_num > len(products):
            await message.answer(f"‚ùå –¢–æ–≤–∞—Ä —Å –Ω–æ–º–µ—Ä–æ–º {product_num} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        product = products[product_num - 1]
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
        success = await rq.delete_product(product.id, user.id)
        
        if success:
            await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{product.name}' —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")
        
    except ValueError:
        await message.answer("‚ùå –ù–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")


@router.message(Command("help"))
async def help_command(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
ü§ñ –ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ Wildberries

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/add - –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
/check <–Ω–æ–º–µ—Ä> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
/delete <–Ω–æ–º–µ—Ä> - –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Wildberries
2. –£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä–æ–≥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50 —Ä—É–±–ª–µ–π)
3. –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∏ —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—ã –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.
"""
    await message.answer(help_text)



